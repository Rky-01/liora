import { execSync } from "child_process"
import process from "process"
import chalk from "chalk"
import fs from "fs/promises"
import path from "path"
import "../config.js"

const pkgPath = path.resolve("package.json")
const pkg = JSON.parse(await fs.readFile(pkgPath, "utf-8"))

function checkCommand(cmd) {
  const flags = ["--version", "-version", "-v"]
  for (const flag of flags) {
    try {
      execSync(`${cmd} ${flag}`, { stdio: "ignore" })
      return true
    } catch {}
  }
  return false
}

function checkLib(name, header) {
  try {
    execSync(`pkg-config --exists ${name}`, { stdio: "ignore" })
    return true
  } catch {
    try {
      execSync(`echo "#include <${header}>" | g++ -E -xc++ - > /dev/null`, {
        stdio: "ignore"
      })
      return true
    } catch {
      return false
    }
  }
}

export async function engineCheck() {
  const nodeVersion = process.versions.node
  const major = parseInt(nodeVersion.split(".")[0])
  const requiredNode = pkg.engines?.node || ">=22.0.0"
  const author = pkg.author?.name || "Unknown"
  
  const checks = {
    "üç∞ Node.js Compatible": major >= parseInt(requiredNode.match(/\d+/)?.[0] || 22),
    "üçÆ ffmpeg": checkCommand("ffmpeg"),
    "üçß git": checkCommand("git"),
    "üç° unzip": checkCommand("unzip"),
    "üç¨ zip": checkCommand("zip"),
    "üç™ g++": checkCommand("g++"),
    "üç´ make": checkCommand("make"),
    "üç≠ python3": checkCommand("python3"),
    "üçØ libavformat-dev": checkLib("libavformat", "libavformat/avformat.h"),
    "üç© libavcodec-dev": checkLib("libavcodec", "libavcodec/avcodec.h"),
    "üç® libavutil-dev": checkLib("libavutil", "libavutil/avutil.h"),
    "üßÅ libswscale-dev": checkLib("libswscale", "libswscale/swscale.h"),
    "üçà libswresample-dev": checkLib("libswresample", "libswresample/swresample.h"),
    "üçã libwebp-dev": checkLib("libwebp", "webp/decode.h"),
    "üçô Pairing Number": !!global.config?.pairingNumber
  }

  const fails = Object.keys(checks).filter(k => !checks[k])
  const total = Object.keys(checks).length
  const ok = total - fails.length

  console.log(
    chalk.cyan.bold(`
‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ
‚îÇ üçì LIORA ENGINE CHECKER üç∞
‚îÇ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
‚îÇ üß© Project : ${chalk.white(pkg.name)}
‚îÇ üç¨ Version : ${chalk.white(pkg.version)}
‚îÇ üßÅ Type    : ${chalk.white(pkg.type)}
‚îÇ üç≠ License : ${chalk.white(pkg.license)}
‚îÇ üç∞ Author  : ${chalk.white(author)}
‚îÇ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
‚îÇ ‚öôÔ∏è  Node.js : ${chalk.white(nodeVersion)}
‚îÇ üç° OK     : ${ok}/${total}
‚îÇ üç™ Failed : ${fails.length}
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ
`)
  )

  if (fails.length > 0) {
    console.log(chalk.red.bold("üç∞ Beberapa dependensi belum terpenuhi:"))
    fails.forEach(f => console.log("   - " + chalk.redBright(f)))
    console.log()
    process.exit(1)
  } else {
    console.log(chalk.green.bold("üç¨ Semua dependensi terpenuhi, siap jalan! ‚ú®"))
  }
}